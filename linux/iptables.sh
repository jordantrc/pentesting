#!/bin/bash
# bash init script for iptables firewall

IPTABLES=/sbin/iptables

ACTION=$1
TARGET=$2

if [ -z $TARGET ]; then
	echo "[*] No target provided, just using secure defaults"
fi

# start firewall function
start_firewall()
{
	# flush everything
	$IPTABLES --flush
	$IPTABLES --delete-chain
	
	# default rules
	$IPTABLES -P INPUT DROP
	$IPTABLES -P FORWARD DROP
	$IPTABLES -P OUTPUT ACCEPT
	
	# anything on loopback is ok
	$IPTABLES -I INPUT 1 -i lo -j ACCEPT
	$IPTABLES -I OUTPUT 1 -o lo -j ACCEPT
	
	# allow anything that's part of an established session
	$IPTABLES -A INPUT -j ACCEPT -m state --state ESTABLISHED,RELATED

	if [ ! -z $TARGET ]; then
		echo "[*] allowing traffic from $TARGET and monitoring bandwidth"
		echo "[*] use the iptables -vn -L to see bandwidth usage"
		# add monitoring to INPUT and OUTPUT chains for traffic from/to TARGET
		iptables -I INPUT 1 -s $TARGET -j ACCEPT
		iptables -I OUTPUT 1 -d $TARGET -j ACCEPT

		# clear counters
		iptables -Z
	fi

	# drop anything not allowed above
	$IPTABLES -A INPUT -j DROP

}

stop_firewall() 
{
	$IPTABLES --flush
}

drop_firewall() 
{
	$IPTABLES --flush
	$IPTABLES -P INPUT ACCEPT
	$IPTABLES -P OUTPUT ACCEPT
	$IPTABLES -P FORWARD DROP
}

case "$1" in
	"status")
		echo "displaying current firewall rules"
		$IPTABLES --line-numbers -v --list
		;;
	"start")
		echo "starting up firewall"
		start_firewall
		;;
	"stop")
		echo "dropping firewall rules, leaving default drop policies in place"
		stop_firewall
		;;
	"restart")
		echo "dropping firewall rules, leaving default drop policies in place"
		stop_firewall
		echo "starting up firewall"
		start_firewall
		;;
	"wide-open")
		echo "WARNING - removing all firewall rules and allowing all traffic"
		drop_firewall
		;;
	*)
		echo "Usage is iptables.sh [status|start|stop|restart|wide-open]"
		exit 1
		;;
esac

exit 0
